// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/decentraland/content-service/data (interfaces: Decentraland)

// Package mocks is a generated GoMock package.
package mocks

import (
	data "github.com/decentraland/content-service/data"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockDecentraland is a mock of Decentraland interface
type MockDecentraland struct {
	ctrl     *gomock.Controller
	recorder *MockDecentralandMockRecorder
}

// MockDecentralandMockRecorder is the mock recorder for MockDecentraland
type MockDecentralandMockRecorder struct {
	mock *MockDecentraland
}

// NewMockDecentraland creates a new mock instance
func NewMockDecentraland(ctrl *gomock.Controller) *MockDecentraland {
	mock := &MockDecentraland{ctrl: ctrl}
	mock.recorder = &MockDecentralandMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDecentraland) EXPECT() *MockDecentralandMockRecorder {
	return m.recorder
}

// GetEstate mocks base method
func (m *MockDecentraland) GetEstate(arg0 int) (*data.Estate, error) {
	ret := m.ctrl.Call(m, "GetEstate", arg0)
	ret0, _ := ret[0].(*data.Estate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEstate indicates an expected call of GetEstate
func (mr *MockDecentralandMockRecorder) GetEstate(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEstate", reflect.TypeOf((*MockDecentraland)(nil).GetEstate), arg0)
}

// GetMap mocks base method
func (m *MockDecentraland) GetMap(arg0, arg1, arg2, arg3 int) ([]*data.Parcel, []*data.Estate, error) {
	ret := m.ctrl.Call(m, "GetMap", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*data.Parcel)
	ret1, _ := ret[1].([]*data.Estate)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetMap indicates an expected call of GetMap
func (mr *MockDecentralandMockRecorder) GetMap(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMap", reflect.TypeOf((*MockDecentraland)(nil).GetMap), arg0, arg1, arg2, arg3)
}

// GetParcel mocks base method
func (m *MockDecentraland) GetParcel(arg0, arg1 int) (*data.Parcel, error) {
	ret := m.ctrl.Call(m, "GetParcel", arg0, arg1)
	ret0, _ := ret[0].(*data.Parcel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetParcel indicates an expected call of GetParcel
func (mr *MockDecentralandMockRecorder) GetParcel(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetParcel", reflect.TypeOf((*MockDecentraland)(nil).GetParcel), arg0, arg1)
}
